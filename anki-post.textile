h2. The JANKI Method 

In May 2010 I began an experiment involving flash cards, spaced-repitition systems, and the Ruby/Rails/Javascript/Linux web stack. The premise was simple: every time I learned anything new technologies, or gained deeper wisdom about programming, I would create a flash card and add it to my spaced-repetition system. Every morning, before starting work, I used ANKI, a spaced-repetition system, to drill those flash cards and push the knowledge into my memory. 

I did this every day since May 2010 and I continue doing so today, Nov 4 2011.  In this essay I explain the methodology I used, the reasoning behind it, and compose my thoughts on the effectiveness of the experiment. 

My goal was to learn to program in a fraction of the time it takes using conventional methods. I called it the JANKI method, 

The JANKI method starts with ANKI, an open source spaced reptition system available for free download. You begin by creating a deck, say "Computer Science" within ANKI. A deck contains many facts, and each fact consists of a question, an answer, and as many tags as you like (e.g. 'rails', 'git', 'coffeescript', 'refactoring'). For example, you might have the following fact:

What linux command lists all running processes?

====================
ps

Tags: linux

Although ANKI can download shared decks, letting you use facts created by others, the JANKI method forbids you to do this because you will diminish your learn. Instead you must create you own decks, drawing from your daily experiences programming, snippets of interest code you read, insightful blog posts that teach you something worth remembering, documentation for libraries you need to know, and, most importantly of all, from mistakes you make. JANKI will become your library of coding knowledge, except it has a fantastic twist. Unlike orderinary notesbooks, you're going to know everything in your JANKI notebook by heart for the rest of your life.

Every morning ANKI computes a list of facts for you to revise. The facts it chooses are the ones you most need to revise that day, and its calculated are based on the Supermemo algorithm. The ultimate goal here is for you to drill the cards an aboslute minimum number of times throughout your life, yet retain permanent memory. You've probably head these figures thrown around before - you should revise 1 day after learning, then a week then a month, then 3 months, then a year and so on. RESEARCH (how many reps in life). The supermemo algorithm optimises the process in two ways. It classifies cards which you frequently get wrong as leeches and removes them from the deck, preventing you from using your time inefficiently on that pesky 2%. It also asks you how well you remember any given fact along a scale that ranges from 0, meaning you forgot, to 3, meaning it was an effortless recall. The amount of time until the next repetition is dependent on how well you remembered any given fact last time, and how many times you had previosuly reviewed a fact. Choose 0 and you'll be drilled the fact a minute later, choose 3 it could be months. Telling Anki how well you remember a fact can be difficult, and the onus is on you to answer truthfully and attempt to calibrate the different eases of recall. 

The hardest part of the JANKI method is not adding or finding facts; nor is it reviewing. The real difficulty is in doing it every day, for months or years on end. The JANKI method stricly requires you drill your cards for ten minutes every morning. . 

h2. Why Use The JANKI Method?

h3. 1. Reduce Repeat Error

The only truly stupidity is repeating your mistakes twice. You must learn. You already know this. What you mightn't have though about is the number of failure reptitions it takes you to figure out why sometthin

Furthermore, constant reminder of past errors will cause you to start seeing patterns and classes of mistakes, and you will form a new mental schema of understanding.

h3. 2. Retain Memory of Unused Tools

Have you ever learned a technology, switch to something else for a few months, then come back to the original technology having forgotten close to everything you were supposed to know? I have, repeatedly. I've heard that your brain never really forgets anything, and so that knowledge is supposed to reside somewhere deep inside , but for my use case as a professional, that knowledge is no longer with me and so I need to relearn it. This is a massive waste of time.

One of the key premises to Spaced Repetition Systems, like ANKI, is that knowledge entered into the system and regaularly reviewed will enver leave your memory. I've foudn this claim to be true and if quizzed on the contents of my 5500 card ANKI deck I'm confident I can recall 95% accurately. 

h3. 3. Program Faster

Will having a complete picture of the API in your head make you a faster programmer? Absolutely. You'll save a ton of time you'd otherwise spend re-referring to documentaiton and other reference material. You'll read other people's code as fluently as natural language, and you'll spend your days in the console. Is this the main way the JANKI method increases your productivity? 

Absolutely not.  As I developed the JANKI method I noticed that it helped me program faster for different reasons. Having an in depth knowledge of APIs within your mind helps you most in debugging. Debugging is the act of isolating the problematic line of code and identifying why the problem occurred, the creating a fix that doesn't upset the rest of the code. Having a total undestanding of built-in fucntions and their uses means you only have to look up the custom function to figure out the debugging.

Another way JANKI methods helps you program faster is brainstorming alternatives. An effect I noticed with ANKI generally is that is reduces your recall time. The knowledge is literally at your fingertips (I found this especially when using ANKI with Spanish vocabulary. I could think of words instantly, whereas without ANKI it took strain). Say your boss asks your what the possible solutions are to a hard technical problem. Having so much knowledge at your fingertips lets you design alternatives on paper rapidly, realisticaly thinking through and evaluating the consequences. If you know what types a function expects, what it returns and where it can be used, then you can practically code in your head.

Yes, you might say that you would get the same benefits from deep knowledge of APIs gained through years of experience. That's true but it misses the point of the JANKI method - you'll gain that knowledge far more rapidly and retain it for much longer using ANKI.

h3. 4. Design Away From Your Machine

h3. 5. Inspiration

h3. 6. Build a Structured Mental Model of Your Domain

h3. 7. Have a Definitive Searchable Reference of All Your Programming Knowledge

Have you ever had a nasty bug pop up and have vague memories of having seen it before, yet you don't remember exactly how you fixed it? Before I started using ANKI this happenend to me frequently. I would spend half a day solving the bug, forget about it, then six months later I'd face it again. This wasn't acceptable - I wanted to only ahave to solve a particular problem once. Luckily the JANKI method enables you to do this. ANKI has a built in search where you find any fact containing a particular word. You can even filter by date or tags. After every nasty bug you should add a few cards to ANKI containing the knolwedge you need to prevent that bug from occurring again. Better yet abstract one level and add a card containing the knowledge needed to prevent that class of bugs from occurring again.

h3. 8. Feel Like You Are Making Progress

h2. The Disadvantages of Anki

h2. Dos and Don'ts of usage

h2. Questionts

h3. Does SRS work? Research For and Against?
