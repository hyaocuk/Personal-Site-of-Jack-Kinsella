---
layout: post
title: Textmate to VIM
subtitle: Where I explain how to reproduce 80+ commands from Textmate in VIM
/* published: false*/
author: Jack Kinsella

---

When I switched from Textmate to VIM I felt like a tourist lost on a Japanse subway without a guide, translator or hope. My mind hurt and my calm faded as the week wore on, and I was never able to find in VIM the features of Textmate I'd learned to love and relied on during the previous two years. I longer after CMD + T to summon my models and a project drawer to rename my files, and I prayed to Allah for a search and replace dialogue box. Instead of answering my please, VIM sat firm and unresponsive and spat errors in my face. Even though I was supposedly going cold turkey on Textmate, I lustily met her night in the smoking area for a guilty nightime edit.

With time I learned to reproduce nearly every Textmate feature in VIM, and then some. This guide isn't about the powerful features VIM has over-and-above Textmate; you'll figure them out on your own. No, this guide is to help you achieve in VIM what you already can using Textmate, only with considerably less pain than I suffered.

Some preliminary assumptions:
# You've installed MAC VIM: 
@brew install macvim@
# You know the basics of VIM. Type vimtutor in your terminal for a tutorial. Further training can be found be referring to the "vim training resources below":#vim_training_resources .
# You were a poweruser of Textmate keyboard shorcuts.
# You've installed "Janus":https://github.com/carlhuda/janus, the community maintained distro of plugins and useful configurations for web programmers
# You have created a ~/.vimrc.local file (for core VIM configurations), ~/.gvimrc.local (for configuring the graphics in VIM) and ~/.janus.rake (for adding or removing plugins VIM). See my "dotfiles":https://github.com/jackkinsella/dotfiles/tree/ for some commented examples. 
# (Bonus) You are a Rails programmer, as about 30% of this guide is Rails specific.

h2. Format

|Action To Be Completed| Shortcut in Textmate | Shortcut in Vim|
[1..9] 1,2,3,4,5,6,7,8 or 9
[Narration]
FILENAME a variable representing your filename

h2. Opening Up The Editor

|Open project from command line| [cd to folder] mate . | [cd to folder] mvim . |

h2. Undo / Redo. 

|Undo|⌘ + Z | u |
|Redo| ⇧ + ⌘ + Z | ⌃ + R |

h2. Opening, closing and creating files

|Open a file| ⌘ + 0 | :e FILENAME (use Tab completion after first few letters) [Save File first]|
|Create new file| File > new | ⌘ + T (new tab) [You will be in a new file. Type and then] :w newfilename |
|Quit| ⌘ + q | :q [throws an error if you have not saved. use :wq to save and quit or :q! to quit without saving] |

h2. Saving Files

|Save file| ⌘ + S | :w |
|Save file as| ⌘ + ⇧ + S | :saveas NEWFILENAME |


h2. File renaming

|Rename a file|[focus on project drawer and select a file] space [type new name]| "Focus on NerdTree":#nerd_tree. Select File (however you want: e.g. search or jklh). m (brings up a menu ) m (chose to modify file) type new name of file and press enter. |

h2(#nerd_tree). Project Drawer/NerdTree

|Focus on project drawer| ⌃ + <Tab> | "Switch tabs until selected":#switch_tabs |
|Close/Open project drawer| ⌃ + ⌥ + ⌘ + D |\n|
|Change size of project drawer| Use mouse to adjust size | [vimrc] let NERDTreeWinSize=16 |
|Opening a subfolder| |Enter to open/close a directory|
|Refresh project tree to reflect newly added files|Automatic|Nearly always automatic. Otherwise press c|

h2. Help

|Search help for 'grep'|Click help menu and search for help|:help grep|

h2(#switch_tabs). Tabs

|New tab| Click on file in project drawer | ⌘ + Shit + T |
|Drop tab| ⌃ + w | ⌃ + w |
| Switch tabs left | ⇧ + ⌘ + ←| :tabp |
|Switch tabs right | ⇧ + ⌘ + →| :tabn |
|Go to tab| ⌘[1-9] | ⌘[1-9]|

h2. Running Tests and Files

|Run tests for given file|⌘ + r | :Rake |
|Run current file| ⌘ + R | :!ruby % [Explanation: :! means execute what follows as if in shell. % expands to the current_file_name so you are executing `ruby current_file_name. This runs in a buffer in VIM making you unable to continue editting.] |

h2. Moving Around A File

|Go to beginning of line| ⌃ + A | ^ |
|Go to end of line | ⌃ + E | $ |
|Go to top of file | ⌘ + Up | g |
|Go to bottom of file | ⌘ + Down | GG |
|Move up one line (with caret at same position)| ⌃ + P | k |
|Move down one line (with caret at same position)| ⌃ + N| j|
|Go to line 20 | ⌘ + L [type a line - e.g. 20] | :20 |

h2. Indentation

|Automatically indent code beautifully| ⌥ + ⌘ + B ("Code Beautifier Plugin":https://github.com/mocoso/code-beautifier.tmbundle) | gg=G |
|Indent|⌘ + [ | > |
|Unindent| ⌘ + ] | < |

h2. Font Size, Line Numberings

|Bigger/Smaller Font| ⌘ +/- | (⌘ +/- makes the screen disproportionate) [~/gvimrc.local] set guifont=Monaco:h18 (replace 18 with desired font-size) [Note that you can try this command out by typing it into a live VIM session just by preceding it with a :, e.g. :set.....]|
|Line numbering| ⌘ + ⇧ + L| :set number (on) :set nonumber (off). Note the symmetry between turning the number on and off, the only different being the preceded "no". This is the same for all VIM set commands. As with other preferences this may be placed in vimrc.local|

h2. Spell Checking

|Highlight incorrect spellings| ⌥ + ⌘ + ; | :set spell |
|Next incorrect spelling | ⌘ + : | [Assuming you've enabled spell checking and can see highlighter errors] ] s (Go to previous spelling error with [s) |

h2. Ruby On Rails

|Call Ruby On Rails generate script | "⌃ + Pipe [1..8]== |:Rgenerate [⌃ler model scaffold] Blog |
|Go To Last Migration| None | :Rmig  |
|Run migrations| ⌃ + ⇧ + Pipe |:Rake when in a migration|
|Switch focus to project drawer| ⌘ + ⌥ + ` (check)| ⌃+ w ⌃ + w [Make this into a simple tab by adding this to your vimrc: noremap <tab> <C-w><C-w> ]|
|Insert erb's <%= | ⌃ + ⇧ + . | [type text you want to surround first and place caret some inside] yss= |
|Insert erb's <% | ⌃ + SHIT + . (cycle through )| yss- |
|Run unit test caret inside of | ⇧ + ⌘ + R | :.Rake (. here represents the current line. You can subsitute this for other lines e.g. :40Rake) TEST|
|Go to test file (e.g. from user.rb to user_spec.rb)| ⌥ + ⇧  + ⌘ + DOWN | :A (:AV in a new split, :AT new tab)|
|Find related file| ⌥ + ⌘ + down | R (If typed within the Controller you'll be brought to the View corresponding to the method selected; If typed in view -> Controller; Migrations -> Next Migration; Typed in Model -> Schema. For something more precise see the following VIM only commands|
|Go to related controller| ⌥ + ⇧ + ⌘ + down | :Rco |
|Go to related helper| As above | :Rhe |
|Go to model under cursor| No equivalent| gf [e.g. you see Pos*t.first -> brought to #post.rb |
|Go to stylesheet under cursor| No equivalent| gf [e.g. you see<%= stylesheet_link_tag 'scaf*fold' %>-> brought to scaffold.css |
|View Rails logs| No equivalent| :Rlogs [:Rake logs:clear if takes too long to load]|
|Go to layout under cursor| No equivalent| gf [e.g. you see layout :print -> brought to #print.html.erb |
|Go to application.rb| No equivalent| :Renv|
|Go to test.rb | No equivalent| :Renv t[tab to autofill out to test]|
|Go to controller from link under cursor| No equivalent| gf [e.g. you see <%= link_to "New", new_comme*nt_path %> -> brought to #comments_controller.rb |
|Create a posts controller | No equivalent |:Rco posts! [note the exclamation mark]|
|Extract to partial| [Select text] ⌃ + H | [Select text] :Rextract PARTIAL_NAME |

h2. Bookmarks

|Add bookmark| ⌘ + F2 (Never worked on my mac) | m[a-z] (The letter in the range refers to this bookmark) |
|Jump to bookmark| F2 (next) + F2 (previous) | 'a (Where 'a' is a bookmark previous set. Type :marks to see all marks)|

h2. Searching Files

|Search file upwards for TOM | ⇧ + ⌃ + S TOM | ?TOM [Then press enter once then repeatedly press n or N to continue searching up or down]|
|Search file downwards for TOM |⌃ + S TOM [Same as above for repeated search]|
|Full screen |"(Lion Only)":https://github.com/enormego/EGOTextMateFullScreen | ⌘ + Enter |
|Search entire project | ⌘ + ⇧ + F | ,a THING_SEARCHING_FOR (ack) |
|Find a specific Method|⌘ + ⇧ + t| /def first_letters_of_method_name OR * [Cycles through instances of the method name under the caret... not necessarily the definition] #does the same but in the opposie direction|

h2. Replacing Text in Files and Project

|Replace all "donut" with "eclair" in file| ⌘ F (Find and Replace Dialogue) Replace All | :%s/donut/eclair/g |
|Replace all "donut" with "eclair" in file, ignoring case | ⌘ F (Find and Replace Dialogue) Select 'Ignroe Case'. Replace All | :%s/donut/eclair/gi |
|Replace all "donut" with "eclair" in file, confirming each time | ⌘ F (Find and Replace Dialogue) Replace Next | :%s/donut/eclair/gc |
|Replace "donut" with "eclair" in entire project| ⌘ + ⇧ + F | (Save first if issues) ,a donut[Enter]. A window pops up with all instances of the term. <Tab> into the ack search window. Type :bufdo %s/donut/eclair/gce. :q the ack search window once down to close it. |
|Replace "donut" with "eclair" in entire project| ⌘ + ⇧ + F | ,a donut[Enter] |

h2. Uppercase/Lowercase (UNFIN)

|Upcase selected text|⌃ + ⇧ + U| ~ |
|Downcase selected text|⌃ + ⇧ + U| ~ |
|Titlecase urrent text| ⌃ + OPTION + U | No equivalent For current line you can use :s :s/\<\(\w\)\(\w*\)\>/\u\1\L\2/g |

h2. Autocomplete

|Autocomplete method| ⎋ after typing first few letters| TAB after typing first few letters|
|Autocomplete filename| No equivalent | ⌃ + X ⌃ + F (repeat for each directory)|
|Autocomplete full line of code | No equivalent | ⌃ + X + L | 

h2. Commeting

|Comment Line or Selection| ⌘ + / | ⌘ + / |

h2. Deletion

|Delete line|⌘ + ⇧ + k | dd |

h2. Syntax Errors

|Check for syntax errors on saving (*life saver)| "Validate On Save Plugin":https://github.com/sxtxixtxcxh/validate-on-save.tmbundle | Built In (A grey bar appears right of the number column with an > beside the error) |

h2. Autoclosing "" () or HTML tags 

|Add opposing bracket or quotation mark| Typing a " will automatically add in closing. | Add "this gist":https://gist.github.com/1193298 |
|Close current html tag|⌘ + ⌥ + .| vim_plugin_task "ragtag", "git://github.com/tpope/vim-ragtag.git" p ⌃ + X Space |

h2. CSS Colours

|View CSS colour wheel| ⌘ + ⇧ + C | No exact equivalent.  vim_plugin_task "vim-css-color", 'git://github.com/skammer/vim-css-color.git' turns #acbdef into its correct colour|
|Jump between words left| ⌥ + ← w |
|Jump between words right| ⌥ + →| b |

h2. Selecting Text

| Begin selection | ⇧ [then use arrows to drag over desired text] | v[enters visual mode. use w to move forward one word. ) to move forward one sentence and % to move to next bracket close. also /apple to move forward to next occurence of apple]|
|Select all| ⌘ + A | vgg=G |
|Increase selection left one word| ⇧ + ⌥ + ← then alt + ← for each additional word| v(select)w then w for each additional word  |
|Select a vertical block| ⌥ + drag mouse | ⌃ + V |

h2. Moving Text Around

|Move selected text up|⌃ + ⌘ + up (or down)| :m 22 (moves current line to line 22. Easier if line numbers are on with :set number ). ⌥ernativly :m+ or :m+N or :m-N for moving 1 or N lines up or down|
|Merge current line With Next Line|⌃ + ⇧ +J | J |
|Sort lines| ⌥ + ⌘ + R > sort in dialogue box | [Text selected] !:sort OR [Text Not Selected] :0,$!sort (0,$ is a range representing whole file) |

h2. Clipboard

|Copy| ⌘ + C| Y
_Copies the current selection, or, if there is no selection, the current line_ |
|Cut| ⌘ + X | d
_Technically this deletes the selection, but deleting in VIM saves the deleted text to a register where it can be now be pasted with p_|
|Paste| ⌘ + V | p
_Pastes below the current line_ 
P
_pastes above the current line_
"*p
_This pastes the last *explicity copied* text. This is important since many commands, such as deleting text, override the paste buffer_ |
|Clipboard history| ⌘ + ⇧ + V | :reg 
_Show a list of registers each of which can be pasted e.g. "8p pastes the contents of the register 8_ |

h2. Duplicating Lines

|Duplicate line/selection| ⌃ + ⇧ + D| Yp 
_y copies line then p pastes in below._ |
|Add placeholder text|lorem + tab| No equivalent|
|Edit ends of selected lines|⌘ + ⌥ + a||
|Wrap selected text in P tags| ⇧ + ⌃ + W | ystp |
|Snippets (e.g. validates present of)| vp<Tab> | [Type TN abbreviation] 
_Non Rails snippets not working since the latest releases of snippets plugin clashes with Command-T search plugin. I've filed bug reports and if anyone has fixed this let me know._ |
|See All Available Snippers| Use Menu |:Rabbrev|

h2(#vim_training_resources). Recommended Resources For Learning Basic Vim

_Remember the key is to train your fingers. Don't read the commands. Open up a blank file and try out different commands._

* "Derek Wyatt's Video Series (Highly recommended, if you can tolerate his excitement)":http://www.derekwyatt.org/vim/vim-tutorial-videos/
* "Spaced Reptition Systems For Drilling (My Personal Favourite)":http://alfmikula.blogspot.com/2010/11/using-spaced-repetition-software-to.html
* "Visual Cheat Sheets":http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html
* "PeepCode's Video Series (Commercial)":http://peepcode.com/products/smash-into-vim-i

