---
layout: post
title: Textmate to Vim
subtitle: A guide to using your favourite Textmate features in Vim
/* published: false*/
author: Jack Kinsella

---


Assumptions:
1) You're using a Mac
2) You've installed Janus
3) You are in Normal Mode for all commands unless specified
4) Key 1 + Key 2 means both at same time | kw means k followed quickly by w|

Sometimes you will need to create customer commands in ~/.vimrc.local anything you place. To save yourself this just download my own version.

Somtimes you will need to install extra plugins. These go in your janus.rake file

h2. Opening Up The Editor

|Open project from command line| [cd to folder] mate . | [cd to folder] mvim . |

h2. Undo / Redo. 

|Undo|⌘ + Z | u |
|Redo| ⇧ + ⌘ + Z | ⌃ + R |

h2. Opening, closing and creating files

|Open a file| ⌘ + 0 | :e FILENAME (use Tab completion after first few letters) [Save File first]|
|Create new file| File > new | ⌘ + T (new tab); type; :w newfilename |

h2. Saving Files

|Save file| ⌘ + S | :w |
|Save file as| ⌘ + ⇧ + S | :saveas NEWNAME |


h2. File renaming

|Rename a file|space (whilst focus is on project drawer)| Focus On Project Drawer. Select File (search). m (menu appears) m type name of file [enter]. You may need to press r to refresh project drawer (usually happens automatically after a few minutes)|

h2. Project Drawer

|Focus on project drawer| ⌃ + <Tab> | <Tab> (assuming you've set it up. otherwise CNRL + W/ ⌃ + W)|
|Close/Open Project Drawer| ⌃ + ⌥ + ⌘ + D |\n|

h2. Tabs

|New tab| Click On File In Project Drawer | ⌘ + Shit + T |
|Drop tab| ⌃ + w | ⌃ + w |
|Switch tabs left | ⇧ + COMMAND + [ (left) ] | :tabp |
|Switch tabs right | ⇧ + COMMAND + right | :tabn |
|Go to tab| ⌘[1-9] | ⌘;[1-9]|

h2. Running Tests and Files

|Run tests for given file|⌘ + r | :Rake |
|Run current file| ⌘ + R | No equivalent. Must do it manually. :!ruby % (explanation: :! means execute the following as if on a shell. ruby % expands to 'ruby current_file_name') |

h2. Moving Around A File

|Go to beginning of line| ⌃ + A | ^ |
|Go to end of line | ⌃ + E | $ |
|Go to top of file | ⌘ + Up | g |
|Go to bottom of file | ⌘ + Down | GG |
|Move up one line (with Carret at same position)| ⌃ + P | k |
|Move down one line (with Carret at same position)| CNRL + N| j|
|Go to line| ⌘ + L 20 | :20 |

h2. Indentation

|Automatically indent code beautifully| ⌥ + ⌘ + B ("Code Beautifier Plugin":https://github.com/mocoso/code-beautifier.tmbundle) | gg=G |
|Indent|⌘ + [ | > |
|Unindent| ⌘ + ] | < |

h2. Visual

|Bigger/Smaller Font| ⌘ +/- | (⌘; +/- doesn't work well) | set guifont=Monaco:h18 [place in ~/gvimrc.local] (replace 18 with desired font-size)
|Line numbering| Menu Command | :set number (on) :set nonumber (off). Note the symmetry. This is the same for all VIM commands|

h2. Spelling

|Highlight incorrect spellings| ⌥ + ⌘ + ; | :set spell |
|Next incorrect spelling | ⌘ + : | ] s (opposite directino with [s) - assumes spell checking is enabled |

h2. Ruby On Rails

|Call RoR generate script| ⌃ + | [1..8]| :Rgenerate [⌃ler model scaffold] Blog |
|Go To Last Migration| None | :Rmig  |
|Run migrations|⌃ + ⇧ + \| |:Rmigrate |
|Switch focus to project drawer| ⌘ + ⌥ + ` (check)| <⌃> + w <⌃> + w OR VIMRC noremap <tab> <C-w><C-w> |
|Insert erb's <%= | ⌃ + ⇧ + . | yss= (after text on screen type this to surround line with tags) |
|Insert erb's <% | ⌃ + SHIT + . (cycle through )| yss- |
|Run unit test caret inside of | ⇧ + ⌘ + R | :.Rake (. here represent current line. Substitute for other lines) TEST |
|Go to test file (e.g. from user.rb to user_spec.rb)| ⌥ + SHIT + ⌘ + DOWN | :A (:AV in a new split, :AT new tab)|
|Find related file| ⌥-⌘-down | R (If typed in ⌃ler -> View(of method selected); If typed in view -> Controller; Migrations -> Next Migration (:A previous migration))|

h2. Bookmarks

|Add bookmark| ⌘ + F2 (Never worked on my mac) | m[a-z] (this letter refers to this bookmark) |
|Jump to bookmark| F2 (next) + F2 (previosu) | 'a (:marks to sell all marks)|

h2. Searching Files

|Search file downwards|@<⌃> + S then type method name@|@/def donught@|
|Search file upwards | ⇧ + ⌃ + S THING_SEARCHING_FOR | ?THING_SEARCHING_FOR |
|Full screen |"(Lion Only)":https://github.com/enormego/EGOTextMateFullScreen | ⌘ + Enter |
|Search entire project | ⌘ + ⇧ + F (grep) | ,a THING_SEARCHING_FOR (ack) |
|Find a specific Method|⌘ + ⇧ + t| /def first_letters_of_method_name OR *(while carret of method name to cycle instances of that method in file)|

h2. Replacing Text in Files and Project

|Replace all "donut" with "eclair" in file| ⌘ F (Find and Replace Dialogue) Replace All | :%s/donut/eclair/g |
|Replace all "donut" with "eclair" in file, ignoring case | ⌘ F (Find and Replace Dialogue) Select 'Ignroe Case'. Replace All | :%s/donut/eclair/gi |
|Replace all "donut" with "eclair" in file, confirming each time | ⌘ F (Find and Replace Dialogue) Replace Next | :%s/donut/eclair/gc |
|Replace "donut" with "eclair" in entire project| ⌘ + ⇧ + F | (Save first if issues) ,a donut[Enter]. A window pops up with all instances of the term. <Tab> into the ack search window. Type :bufdo %s/donut/eclair/gce. :q the ack search window once down to close it. |
|Replace "donut" with "eclair" in entire project| ⌘ + ⇧ + F | ,a donut[Enter] |

h2. Uppercase/Lowercase (UNFIN)

|Upcase selected text|⌃ + ⇧ + U|
|Titelcase current text| ⌃ + OPTION + U |

h2. Autocomplete

|Autocomplete method| ⎋ after typing first few letters| TAB after typing first few letters|
|Autocomplete filename| Not possible | ⌃ + X ⌃ + F (repeat for each directory)|
|Autocomplete full line of code | Not possible | ⌃ + X ⌃ + L | 

h2. Commeting

|Comment Line or Selection| ⌘ + / | ⌘ + / |

h2. Deletion

|Delete line|⌘ + ⇧ + k | dd |

h2. Syntax Errors

|Check for syntax errors on saving (*life saver)| "Validate On Save Plugin":https://github.com/sxtxixtxcxh/validate-on-save.tmbundle | Built In (A grey bar appears right of the number column with an > beside the error) |

h2. Autoclosing "" () or HTML tags 

|Add opposing bracket or quotation mark| Typing a " will automatically add in closing. | Type let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}', '|':'|' } or place these lines in your vimrc.local file let g:AutoCloseProtectedRegions = ["Character"] Add vim_plugin_task "autoclose", "git://github.com/Townk/vim-autoclose.git"|
|Close current html tag|⌘ + ⌥ + .| vim_plugin_task "ragtag", "git://github.com/tpope/vim-ragtag.git" p CNRL + X Space |

h2. CSS Colours

|View CSS colour wheel| ⌘ + ⇧ + C | No exact equivalent.  vim_plugin_task "vim-css-color", 'git://github.com/skammer/vim-css-color.git' turns #acbdef into its correct colour|
|Jump between words left| ⌥ + Left | w |
|Jump between words right| ⌥ + Right | b |

h2. Selecting Text

|Select all| ⌘ + A | vgg=G |
|Increase selection left one word| ⇧ + ⌥ + Left then alt + left for each additional word| v(select)w then w for each additional word  |
|Select a vertical block| ⌥ + drag mouse | ⌃ + V |

h2. Moving Text Around

|Move selected text up|⌃ + ⌘ + up (or down)| :m 22 (moves current line to line 22. Easier if line numbers are on with :set number ). ⌥ernativly :m+ or :m+N or :m-N for moving 1 or N lines up or down|
|Merge current line With Next Line|⌃+⇧+J | J |
|Sort lines| ⌥ + ⌘ + R > sort in dialogue box | [Text selected] !:sort OR [Text Not Selected] :0,$!sort (0,$ is a range representing whole file) |

h2. Clipboard

|Copy| ⌘ + C| Y(copy current selection, or line if nothing selected)
|Cut| ⌘ + X | d(deleted selection, but deleting in VIM sends it to a register where it can be pasted with p)|
|Paste| ⌘ + V | p(paste below current line) |
|Clipboard history|⌘ + ⇧ + V | :reg (see a list of registers each of which can be pasted e.g. "8p) |

h2. Duplicating Lines

|Duplicate line/selection| ⌃-⇧-D| Yp (y copies line then p pastes in below) |
|Add placeholder text|lorem + tab| No Equivalent |
|Edit ends of selected lines|⌘+opt+a||
|Wrap selected text in P tags| ⇧ + ⌃ + W | ystp
|Snippets (e.g. validates present of)| vp<Tab> | Currently clashes with Command-T since both use T. If anyone can fix this let me know|
